using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using DativeBackend.Models;

namespace DativeBackend.Controllers {
    [Route("Api/[controller]")]
    [ApiController]
    [Authorize]  // [Authorize(AuthenticationSchemes = JwtBearerDefaults.AuthenticationScheme)]
    public class CustomerController : ControllerBase {
        private readonly CustomerContext _context;

        public CustomerController(CustomerContext context) {
            _context = context;
        }

        // GET: Api/Customer/GetAllCustomers
        [HttpGet("GetAllCustomers")]
        public async Task<ActionResult<IEnumerable<CustomerDTO>>> GetCustomer() {
            return await _context.Customer
                .Select(x => CustomerToDTO(x))
                .ToListAsync();
        }

        // GET: Api/Customer/GetCustomerData/5
        [HttpGet("GetCustomerData/{id}")]
        public async Task<ActionResult<CustomerDTO>> GetCustomer(int id) {
            var customer = await _context.Customer.FindAsync(id);

            if (customer == null) {
                return NotFound();
            }

            return CustomerToDTO(customer);
        }

        // POST: api/Customer/CreateCustomer
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost("CreateCustomer")]
        public async Task<ActionResult<CustomerDTO>> PostCustomer(Customer customer) {
            _context.Customer.Add(customer);
            await _context.SaveChangesAsync();

            return CreatedAtAction(nameof(GetCustomer), new { id = customer.CustomerId }, CustomerToDTO(customer));
        }

        /*
        @xabicasado: Autogenerated extra methods, not needed for the exercise.
        
        // PUT: api/Customer/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutCustomer(int id, Customer customer) {
            if (id != customer.CustomerId) {
                return BadRequest();
            }

            _context.Entry(customer).State = EntityState.Modified;

            try {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException) {
                if (!CustomerExists(id)) {
                    return NotFound();
                } else {
                    throw;
                }
            }

            return NoContent();
        }

        // DELETE: api/Customer/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Customer>> DeleteCustomer(int id) {
            var customer = await _context.Customer.FindAsync(id);
            if (customer == null) {
                return NotFound();
            }

            _context.Customer.Remove(customer);
            await _context.SaveChangesAsync();

            return customer;
        }

        private bool CustomerExists(int id) {
            return _context.Customer.Any(e => e.CustomerId == id);
        }
        */

        private static CustomerDTO CustomerToDTO(Customer customer) =>
            new CustomerDTO {
                CustomerId = customer.CustomerId,
                PostalCode = customer.PostalCode,
                Name = customer.Name,
                Surname = customer.Surname,
                Age = customer.Age
            };
    }
}
